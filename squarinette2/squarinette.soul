graph squarinette  [[main]]
{
    input breath.pressure breathPressure [[min: 0, max: 10, init: 0]];
    input breath.noise noise [[min: 0, max: 1, init: 0.02]];

    input delay_length.eventIn delayLength [[min: 1.0/7000.0, max: 1.0/20.0, init: 1/440.0]];
    input pole.eventIn filterPole [[min: -1.0, max: 1.0, init: 0.9]];

    input edge.eventIn clippingEdge [[min: 0.0, max: 3.5, init: 1.0]];
    input offset.eventIn inputOffset [[min: -0.1, max: 0.1, init: 0.00001]];
    input tone_hole_delay_length.eventIn toneHoleLength [[min: 0.0, max: 1.0]];
    input tone_hole_gain_coeff.eventIn toneHoleGain [[min: -1.0, max: 1.0, init: 0.0]];

    output stream float audioOut;

    let
    {
        breath = NoisyBreath;
        reed = CaneReedExcitation;
        bore = DelayL(50000);
        delay_length = EvExpSmooth;
        losses = DynamicOnePole;
        pole = EvExpSmooth;

        edge = EvExpSmooth;
        offset = EvExpSmooth;
        tone_hole_delay = DelayL(50000);
        tone_hole_delay_length = EvExpSmooth;
        tone_hole_delay_mul = soul::gain::DynamicGain(float);
        tone_hole_gain_coeff = EvExpSmooth;
        tone_hole_gain = soul::gain::DynamicGain(float);
    }

    connection
    {
        breath -> reed.m;
        edge -> reed.n;
        offset -> reed.b;

        reed -> bore.audioIn;
        delay_length -> bore.delay, tone_hole_delay_mul.in;
        bore -> losses.audioIn;
        pole -> losses.pole;

        losses -> [1] -> tone_hole_delay.audioIn;
        tone_hole_delay_length -> tone_hole_delay_mul.gain;
        tone_hole_delay_mul -> tone_hole_delay.delay;
        tone_hole_delay -> tone_hole_gain.in;
        tone_hole_gain_coeff -> tone_hole_gain.gain;
        tone_hole_gain -> reed.x;
        losses -> [1] -> reed.x;

        losses -> audioOut;
    }
}

processor CaneReedExcitation
{
    input stream float x; // reflection

    input stream float m; // input gain
    input stream float n; // clipping edge
    input stream float b; // input offset

    output stream float out;

    void run()
    {
        loop
        {
            let mx = m*(x+b);
            let abs_mx = abs(mx);
            let abs_mx_n = pow(abs_mx, n);
            let denom = pow(1 + abs_mx_n, 1/n);
            out << -mx / denom;
            advance();
        }
    }
}
