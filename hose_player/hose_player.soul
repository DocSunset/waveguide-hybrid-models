graph hose_player  [[main]]
{
    input breath.eventIn breathPressure;
    input delay_length.eventIn delayLength [[min: 1/7000.0, max: 1/20.0, init: 1/440.0]];
    input lip_freq.eventIn lipFreq [[min: 20, max: 16000, init: 440.0]];
    output stream float audioOut;

    let
    {
        test_noise = soul::noise::White;
        breath = EvExpSmooth;
        delay_length = EvExpSmooth;
        lip_freq = EvExpSmooth;
        lip = LipExcitation;
        dcblock = DCBlocker;
        bore = DelayL(100000);
        reflection = soul::gain::DynamicGain(float);
        reflection_gain_coeff = EvExpSmooth;
    }

    connection
    {
        breath -> lip.breathPressure;
        lip_freq -> lip.frequency;

        lip -> dcblock;
        dcblock -> bore.audioIn, audioOut;
        delay_length -> bore.delay;
        bore -> [1] -> lip.borePressure;
    }
}

processor LipExcitation
{
    input stream float breathPressure;
    input stream float borePressure;
    input stream float frequency;
    
    output stream float out;

    void run()
    {
        float xnm1 = 0;
        float xnm2 = 0;
        float ynm1 = 0;
        float ynm2 = 0;

        loop
        {
            let mouthPressure = 0.3f * breathPressure;
            let bPressure = 0.85f * borePressure;
            var deltaPressure = mouthPressure - bPressure;

            let f = clamp(frequency, 0.0f, 0.5f * float(processor.frequency));
            let theta = float(twoPi) * f / float(processor.frequency);
            let r = 0.997f;
            let a2 = r * r;
            let a1 = -2.0f * r * cos(theta);
            let b0 = 1.0f;
            let b1 = 0.0f;
            let b2 = 0.0f;

            let xn = deltaPressure * 0.03f;
            float yn = b0 * xn + b1 * xnm1 + b2 * xnm2 
                               - (a1 * ynm1 + a2 * ynm2);

            deltaPressure = yn * yn;
            if (deltaPressure > 1.0f) deltaPressure = 1.0f;
            out << deltaPressure * mouthPressure + (1.0f - deltaPressure) * bPressure;

            advance();

            xnm1 = xn;
            xnm2 = xnm1;
            ynm1 = yn;
            ynm2 = ynm1;
        }
    }
}
