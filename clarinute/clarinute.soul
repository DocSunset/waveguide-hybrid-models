
/**
    This is an auto-generated SOUL patch template.
    This example code simply plays a trivial sinewave mono-synth -
    it's up to you to build upon this and create a real synthesiser!
*/
graph clarinot  [[main]]
{
    input pressure.eventIn pressureIn [[min: 0, max: 1, init: 0]];
    input noisiness.eventIn noiseGain [[min: 0, max: 1, init: 0.02]];

    input delay_length.eventIn delayLength [[min: 1.0/7000.0, max: 1.0/20.0]];
    input pole.eventIn filterPole [[min: -1.0, max: 1.0, init: 0.9]];
    input string_refl_coeff.eventIn stringReflection [[min: 0, max: 1, init: 0.45]];

    input flute_coeff.eventIn flutiness [[min: 0, max: 1, init: 0]];
    input jet_delay_ratio.eventIn jetRatio [[min: 0, max: 2, init: 1.111]];
    input jet_refl_coeff.eventIn jetReflection [[min: -1, max: 1, init: -0.45]];
    input distortion_gain.eventIn distortionGain [[min: 1, max: 2, init: 1]];

    input clari_coeff.eventIn clariness [[min: 0, max: 1, init: 1]];
    input reed_stiffness.eventIn reedStiffness [[min: 0.0, max: 1.0, init: -0.8]];
    input reed_opening.eventIn reedOpening [[min: -1.0, max: 1.0, init: 0.6]];
    input tone_hole_delay_ratio.eventIn toneHoleRatio [[min: 1.0, max: 10.0, init: 1.0]];
    input tone_hole_gain_coeff.eventIn toneHoleGain [[min: -1.0, max: 1.0, init: 0.0]];

    output stream float audioOut;

    let
    {
        breath = NoisyBreath;
        pressure = EvExpSmooth;
        noisiness = EvExpSmooth;

        excitation = Excitation;
        clipping = Clamp(-1.0, 1.0);
        dcblocker = DCBlocker;

        bore = DelayL(50000);
        delay_length = EvExpSmooth;
        losses = DynamicOnePole;
        pole = EvExpSmooth;

        string_reflection = soul::gain::DynamicGain(float);
        string_refl_coeff = EvExpSmooth;

        flute_coeff = EvExpSmooth;
        jet_delay = DelayL(100000);
        jet_delay_ratio_mul = soul::gain::DynamicGain(float);
        jet_delay_ratio = EvExpSmooth;
        jet_refl_coeff = EvExpSmooth;
        distortion_gain = EvExpSmooth;

        clari_coeff = EvExpSmooth;
        reed_stiffness = EvExpSmooth;
        reed_opening = EvExpSmooth;
        tone_hole_delay = DelayL(50000);
        tone_hole_delay_ratio = EvExpSmooth;
        tone_hole_delay_calc = ToneHoleDelayCalc;
        tone_hole_gain_coeff = EvExpSmooth;
        tone_hole_gain = soul::gain::DynamicGain(float);
    }

    connection
    {
        pressure -> breath.pressureIn;
        noisiness -> breath.noise_gain_coeff;

        breath -> excitation.h;
        reed_stiffness -> excitation.m;
        reed_opening -> excitation.b;
        jet_refl_coeff -> excitation.r_f;
        distortion_gain -> excitation.d;

        excitation -> clipping -> dcblocker -> bore.audioIn;
        delay_length -> bore.delay, 
                        jet_delay_ratio_mul.in, 
                        tone_hole_delay_calc.lengthIn;
        bore -> losses.audioIn;
        pole -> losses.pole;

        losses -> [1] -> tone_hole_delay.audioIn;
        tone_hole_delay_ratio -> tone_hole_delay_calc.ratio;
        tone_hole_delay_calc -> tone_hole_delay.delay;
        tone_hole_delay -> tone_hole_gain.in;
        tone_hole_gain_coeff -> tone_hole_gain.gain;
        tone_hole_gain -> string_reflection.in, jet_delay.audioIn;

        losses -> [1] -> jet_delay.audioIn;
        jet_delay -> excitation.r;
        jet_delay_ratio -> jet_delay_ratio_mul.gain;
        jet_delay_ratio_mul -> jet_delay.delay;

        losses -> [1] -> string_reflection.in;
        string_refl_coeff -> string_reflection.gain;
        string_reflection -> bore.audioIn;

        losses -> audioOut;

        flute_coeff -> excitation.F;
        clari_coeff -> excitation.C;
    }
}

processor Excitation
{
    input stream float h; // breath
    input stream float r; // reflection

    input stream float F; // flute amount
    input stream float r_f; // flute reflection coeff
    input stream float d; // flute distortion gain

    input stream float C; // clari amount
    input stream float m; // reed stiffness
    input stream float b; // reed opening

    output stream float out;

    void run()
    {
        loop
        {
            let xc = -0.95f * r - h; 
            let xf = (r_f * r + h) * d;
            let c = xc * ( -m * xc + b) + h; 
            let f = xf * (xf * xf - 1);
            let y = F * f + C * c;
            out << y;
            advance();
        }
    }
}

processor ToneHoleDelayCalc
{
    input stream float ratio;
    input stream float lengthIn;
    output stream float lengthOut;

    void run()
    {
        loop
        {
            lengthOut << lengthIn / ratio;
            advance();
        }
    }
}
