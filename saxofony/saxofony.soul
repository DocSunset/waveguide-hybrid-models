graph saxofony  [[main]]
{
    input breath.pressure breathPressure;
    input breath.noise;

    input delay_length.eventIn stringLength [[min: 1/7000.0f, max: 1/20.0f, init: 1/440.0f]];
    input string_position.eventIn stringPosition [[init: 0.9f]];

    input pole.eventIn filterPole [[min: -1, max: 1, init: 0.75f]];

    input reed_opening.eventIn reedOpening [[min: 0.0f, max: 1.0f, init: 0.7f]];
    input reed_stiffness.eventIn reedStiffness [[min: 0.0f, max: 1, init: 0.3f]];

    output stream float audioOut;

    let
    {
        breath = NoisyBreath;

        delay_length = EvExpSmooth;
        string_position = EvExpSmooth;
        lengths_calc = StringPositionDelayLengths;

        bstring = DelayA(50000);
        loss_filter = DynamicOnePole;
        pole = EvExpSmooth;

        nstring = DelayA(50000);

        reed = ReedExcitation;
        reed_opening = EvExpSmooth;
        reed_stiffness = EvExpSmooth;
    }

    connection
    {
        delay_length -> lengths_calc.string_length;
        string_position -> lengths_calc.position;
        lengths_calc.nlength -> nstring.delay;
        lengths_calc.blength -> bstring.delay;

        breath -> reed.breath;
        reed_opening -> reed.offset;
        reed_stiffness -> reed.slope;

        reed.bout -> bstring.audioIn;
        bstring -> loss_filter.audioIn;
        pole -> loss_filter.pole;
        loss_filter -> [1] -> reed.bin;

        reed.nout -> nstring.audioIn;
        nstring -> [1] -> reed.nin;

        reed.out -> audioOut;
    }
}
