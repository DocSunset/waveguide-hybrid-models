graph flute [[main]]
{
    input breath.pressure breathPressure [[min: 0, max: 8, init: 0]];
    input breath.noise noise [[min: 0, max: 1, init: 0.02]];
    input offset.eventIn excitationOffset [[min: -0.1, max: 0.1, init: 0.0001]];

    input delay_length.eventIn delayLength [[min: 1.0/7000.0, max: 1.0/20.0]];
    input pole.eventIn filterPole [[min: -1.0, max: 1.0, init: 0.9]];
    input string_refl_coeff.eventIn stringReflection [[min: 0, max: 1, init: 0.0]];

    input jet_delay_ratio.eventIn jetRatio [[min: 0, max: 2, init: 1.111]];
    input jet_refl_coeff.eventIn jetReflection [[min: -1, max: 1, init: 1.0]];

    output stream float audioOut;

    let
    {
        breath = NoisyBreath;
        excitation = CubicMapExcitation;
        offset = EvExpSmooth;
        clipping = Clamp(-1.0, 1.0);
        dcblocker = DCBlocker;

        bore = DelayL(50000);
        delay_length = EvExpSmooth;
        losses = DynamicOnePole;
        pole = EvExpSmooth;

        string_reflection = soul::gain::DynamicGain(float);
        string_refl_coeff = EvExpSmooth;

        jet_delay = DelayL(100000);
        jet_delay_ratio_mul = soul::gain::DynamicGain(float);
        jet_delay_ratio = EvExpSmooth;
        jet_refl_coeff = EvExpSmooth;
    }

    connection
    {
        breath -> excitation.h;
        jet_refl_coeff -> excitation.r_f;
        offset -> excitation.b;

        excitation -> dcblocker -> bore.audioIn;
        delay_length -> bore.delay, 
                        jet_delay_ratio_mul.in;
        bore -> losses.audioIn;
        pole -> losses.pole;

        losses -> [1] -> jet_delay.audioIn;
        jet_delay -> excitation.r;
        jet_delay_ratio -> jet_delay_ratio_mul.gain;
        jet_delay_ratio_mul -> jet_delay.delay;

        losses -> [1] -> string_reflection.in;
        string_refl_coeff -> string_reflection.gain;
        string_reflection -> bore.audioIn;

        losses -> audioOut;
    }
}

processor CubicMapExcitation
{
    input stream float h; // breath
    input stream float r; // reflection
    input stream float r_f; // jet reflection coeff
    input stream float b; // offset

    output stream float out;

    void run()
    {
        loop
        {
            let x = clamp(r_f * r + b, -1.0f, 1.0f);
            out << h * x * x * x + (1.0f - h) * x;
            advance();
        }
    }
}
